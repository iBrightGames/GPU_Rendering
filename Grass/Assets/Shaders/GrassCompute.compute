#pragma kernel CSMain

RWStructuredBuffer<float4> PosScaleBuffer; // xyz = pos, w = scale
RWStructuredBuffer<float4> ColorBuffer;    // rgba
RWTexture2D<float4> gradientTex;           // CPU tarafından gönderilecek

cbuffer Params
{
    float2 areaSize;
    float scaleMin;
    float scaleMax;
    uint grassCount;
};

[numthreads(256,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= grassCount) return;

    // Grid tabanlı pozisyon
    float gridSize = ceil(sqrt(grassCount));
    float cellX = areaSize.x / gridSize;
    float cellZ = areaSize.y / gridSize;
    uint x = index % (uint)gridSize;
    uint z = index / (uint)gridSize;

    float posX = (x + frac(sin(index*12.345)*43758.5453)) * cellX - areaSize.x*0.5;
    float posZ = (z + frac(sin(index*78.233)*43758.5453)) * cellZ - areaSize.y*0.5;
    float y = 0;

    // Scale
    float scale = scaleMin + frac(sin(index*34.567)*43758.5453) * (scaleMax - scaleMin);

    // Gradient’den renk seç
    float t = frac(sin(index*98.765)*43758.5453);
    uint width, height;
    gradientTex.GetDimensions(width, height);
    uint xIndex = (uint)(t * (width - 1));
    float4 color = gradientTex[int2(xIndex,0)];

    PosScaleBuffer[index] = float4(posX, y, posZ, scale);
    ColorBuffer[index] = color;
}
